From e0d4b57253a8850bef6bc5ed5c54e3c0630b6f89 Mon Sep 17 00:00:00 2001
From: Arturo Rinaldi <arty.net2@gmail.com>
Date: Wed, 1 Feb 2017 12:14:10 +0100
Subject: [PATCH 2/4] adding MODE_OTTO functionalities

---
 src/dfu_util.h |  3 ++-
 src/main.c     | 64 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 64 insertions(+), 3 deletions(-)

diff --git a/src/dfu_util.h b/src/dfu_util.h
index d636393..4390425 100644
--- a/src/dfu_util.h
+++ b/src/dfu_util.h
@@ -12,7 +12,8 @@ enum mode {
 	MODE_DETACH,
 	MODE_UPLOAD,
 	MODE_DOWNLOAD,
-	MODE_RESET_STM32
+	MODE_RESET_STM32,
+	MODE_OTTO
 };

 extern struct dfu_if *dfu_root;
diff --git a/src/main.c b/src/main.c
index a473a61..d999cb3 100644
--- a/src/main.c
+++ b/src/main.c
@@ -183,6 +183,7 @@ static void help(void)
 		"  -D --download <file>\t\tWrite firmware from <file> into device\n"
 		"  -R --reset\t\t\tIssue USB Reset signalling once we're finished\n"
 		"  -r --reset-stm32\t\tFollow STM32 DFU reset procedures to start firmware\n"
+		"  -O --otto-down\t\tDownload and reset StarOtto\n"
 		"  -s --dfuse-address <address>\tST DfuSe mode, specify target address for\n"
 		"\t\t\t\traw file download or upload. Not applicable for\n"
 		"\t\t\t\tDfuSe file (.dfu) downloads\n"
@@ -222,6 +223,7 @@ static struct option opts[] = {
 	{ "reset", 0, 0, 'R' },
 	{ "dfuse-address", 1, 0, 's' },
 	{ "reset-stm32", 0, 0, 'r' },
+	{ "otto-down", 1, 0, 'O' },
 	{ 0, 0, 0, 0 }
 };

@@ -251,7 +253,7 @@ int main(int argc, char **argv)

 	while (1) {
 		int c, option_index = 0;
-		c = getopt_long(argc, argv, "hVvleE:d:p:c:i:a:S:t:U:D:Rs:Z:K:", opts,
+		c = getopt_long(argc, argv, "hVvleE:d:p:c:i:a:S:t:U:D:Rs:Z:K:r:O:", opts,
 				&option_index);
 		if (c == -1)
 			break;
@@ -323,6 +325,10 @@ int main(int argc, char **argv)
 		case 'r':
 			mode = MODE_RESET_STM32;
 			break;
+		case 'O':
+			mode = MODE_OTTO;
+			file.name = optarg;
+			break;
 		case 's':
 			dfuse_options = optarg;
 			break;
@@ -347,7 +353,7 @@ int main(int argc, char **argv)
 		match_config_index = -1;
 	}

-	if (mode == MODE_DOWNLOAD) {
+	if (mode == MODE_DOWNLOAD || mode == MODE_OTTO) {
 		dfu_load_file(&file, MAYBE_SUFFIX, MAYBE_PREFIX);
 		/* If the user didn't specify product and/or vendor IDs to match,
 		 * use any IDs from the file suffix for device matching */
@@ -659,6 +665,60 @@ status_again:
 				exit(1);
 	 	}
 		break;
+	case MODE_OTTO:
+		// download part
+
+		if (((file.idVendor  != 0xffff && file.idVendor  != runtime_vendor) ||
+			 (file.idProduct != 0xffff && file.idProduct != runtime_product)) &&
+			((file.idVendor  != 0xffff && file.idVendor  != dfu_root->vendor) ||
+			 (file.idProduct != 0xffff && file.idProduct != dfu_root->product))) {
+			errx(EX_IOERR, "Error: File ID %04x:%04x does "
+				"not match device (%04x:%04x or %04x:%04x)",
+				file.idVendor, file.idProduct,
+				runtime_vendor, runtime_product,
+				dfu_root->vendor, dfu_root->product);
+		}
+		if (dfuse_device || dfuse_options || file.bcdDFU == 0x11a) {
+				if (dfuse_do_dnload(dfu_root, transfer_size, &file,
+							dfuse_options) < 0)
+				exit(1);
+		} else {
+			if (dfuload_do_dnload(dfu_root, transfer_size, &file) < 0)
+				exit(1);
+		}
+
+		//resetting stm32 part
+
+		//ST Application Note 3156 Documents how to reset an STM32 out of DFU mode and into firmware mode
+		//Basicly, send the target vector reset address, then a zero-length download command, then by a get status command.
+
+		printf("Resetting STM32, starting firmware at address 0x08000000...\n");
+		int otto_ret = dfuse_special_command(dfu_root, 0x08000000, SET_ADDRESS);
+		if( otto_ret < 0 ) {
+			printf("Error: Unable to set start address for reseting\n");
+			exit(1);
+		}
+
+		int otto_dret = dfuse_download(dfu_root, 0, NULL, 2);
+
+		if( otto_dret < 0 ) {
+			printf("Error: Unable to initiate zero-length download\n");
+			exit(1);
+		}
+		struct dfu_status otto_dest_status;
+		int otto_rr = dfu_get_status( dfu_root, &otto_dest_status );
+		if( otto_rr < 0 ) {
+			printf("Error: Unable to get status: %d\n", otto_rr);
+			exit(1);
+		}
+
+		if( otto_dest_status.bState != STATE_DFU_MANIFEST) {
+			printf("Error: Expected STM32 to be in dfuMANIFEST state after get-status command!\n");
+		} else {
+			printf("Successfully reset STM32\n");
+		}
+
+		break;
 	case MODE_DETACH:
 		if (dfu_detach(dfu_root->dev_handle, dfu_root->interface, 1000) < 0) {
 			warnx("can't detach");
--
2.11.0
